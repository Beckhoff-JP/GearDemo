<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="MAIN" Id="{22afa678-1e60-4864-9c5a-6f323d8f260f}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	main_job :FB_Executor;
	reset_job : FB_Executor;
	fb_observer : FB_Observer;
	_job_temp	: REFERENCE TO FB_Executor; // reference to job object for working.
	
	mc_power_future: POINTER TO FutureMCPower;
	mc_power_future_creator: FutureMCPowerCreator;

	mc_reset_future: POINTER TO FutureMCReset;
	mc_reset_future_creator: FutureMCResetCreator;

	
	mc_set_position_future: POINTER TO FutureMCSetPosition;
	mc_set_position_future_creator: FutureMCSetPositionCreator;

	
	initial_parallel_job_container : REFERENCE TO FB_Executor;
	_axis1_initial_job : REFERENCE TO FB_Executor;
	_axis2_initial_job : REFERENCE TO FB_Executor;
	
	demo_job_container : REFERENCE TO FB_Executor;

	mc_gear_in_future : POINTER TO FutureMCGearIn;
	mc_gear_in_future_creator : FutureMCGearInCreator;

	mc_gear_out_future : POINTER TO FutureMCGearOut;
	mc_gear_out_future_creator : FutureMCGearOutCreator;

	mc_move_rel_future : POINTER TO FutureMCMoveRelative;
	mc_move_rel_future_creator : FutureMCMoveRelativeCreator;

	mc_move_abs_future : POINTER TO FutureMCMoveAbsolute;
	mc_move_abs_future_creator : FutureMCMoveAbsoluteCreator;

	mc_move_velocity_future: POINTER TO FutureMCMoveVelocity;
	mc_move_velocity_future_creator: FutureMCMoveVelocityCreator;

	mc_stop_future: POINTER TO FutureMCStop;
	mc_stop_future_creator: FutureMCStopCreator;
	
	sleep : POINTER TO FutureSleep;
	sleep_creator : FutureSleepCreator;


	fbJog:MC_Jog;
	
	iState:INT;
	stAxis1:axis_ref;
	stAxis2:axis_ref;
	bStart: BOOL;
	bJogPlus: BOOL;
	bJogMinus: BOOL;
	bPower: BOOL;
	bReset:BOOL;
	bError:BOOL;
	bAllAxisPowerOn: BOOL;
	bInsync:BOOL;
	create_container: INT;
	boot_up : BOOL := TRUE;
	i: UINT;
	
	(*
	fbPower1:mc_power;
	fbPower2:mc_power;
	fbReset1:mc_reset;
	fbReset2:mc_reset;
	fbSetPosition1:mc_setposition;
	fbSetPosition2:mc_setposition;
	fbGearIn:MC_GearIn;
	fbGearOut:MC_GearOut;
	fbJog:MC_Jog;

	bAllAxisPowerOn: BOOL;
	bInsync:BOOL;
	iMoveCount:INT;
	iMoveCount1:INT;
	lrDiatance:LREAL;
	tWaitTimer1:TON;
	tWaitTimer2:TON;
	tWaitTimer3:TON;
	tWaitTimer4:TON;
	tWaitTimer5:TON;
	tWaitTimer6:TON;
	tWaitTimer7:TON;
	tWaitTimer8:TON;
	fbMoveVelo:MC_MoveVelocity;
	fbMoveRel:MC_MoveRelative;
	fbMoveAbs1:MC_MoveAbsolute;
	fbMoveAbs2:MC_MoveAbsolute;
	fbMoveAbs3:MC_MoveAbsolute;
	fbMoveAbs4:MC_MoveAbsolute;
	fbMoveAbs5:MC_MoveAbsolute;
	fbStop:MC_Halt;

	*)
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF boot_up THEN
	reset_job.create_container(ContainerType.PARALLEL_QUEUE, 'RESET_JOB');
	reset_job.continuous_mode := TRUE;
	reset_job.job_event_reporter := fb_observer;
	
	main_job.create_container(ContainerType.QUEUE, 'MAIN_JOB');
	main_job.continuous_mode := FALSE;
	main_job.job_event_reporter := fb_observer;
	
	boot_up := FALSE;
END_IF

IF stAxis1.NcToPlc.ErrorCode <> 0 AND stAxis2.NcToPlc.ErrorCode <> 0 THEN
	main_job.abort();
	bStart := FALSE;
	bError:=TRUE;
END_IF

IF bReset AND reset_job.children <> 0 THEN
	reset_job.init();
	_job_temp REF= reset_job.children.create_future(mc_reset_future_creator,'AXIS1_RESET');
	IF __ISVALIDREF(_job_temp) THEN
		IF __QUERYPOINTER(_job_temp.future, mc_reset_future) THEN
			mc_reset_future^.set_parameters(stAxis1);
		END_IF		
	END_IF
	_job_temp REF= reset_job.children.create_future(mc_reset_future_creator,'AXIS2_RESET');
	IF __ISVALIDREF(_job_temp) THEN
		IF __QUERYPOINTER(_job_temp.future, mc_reset_future) THEN
			mc_reset_future^.set_parameters(stAxis2);
		END_IF
	END_IF
	bReset := FALSE;
END_IF


IF reset_job.execute() THEN
	iState := 0;
	//main_job.start();
END_IF

IF reset_job.current_state = E_FutureExecutionState.wait_for_process THEN
	reset_job.start();
END_IF


CASE iState OF 
	0:	
		IF bPower THEN
			IF main_job.reset() THEN
				iState := 1;
			END_IF
		END_IF	

	1: // initialization
			
		initial_parallel_job_container REF= main_job.children.create_container(ContainerType.PARALLEL, 'POWER_ON');
		
		// create batch job container for each axis initialization jobs
		_axis1_initial_job REF= initial_parallel_job_container.children.create_container(ContainerType.BATCH, 'AXIS_1_POWER');
		_axis2_initial_job REF= initial_parallel_job_container.children.create_container(ContainerType.BATCH, 'AXIS_2_POWER');
		
		// axis1 
		// power on
		_job_temp REF= _axis1_initial_job.children.create_future(mc_power_future_creator,'AXIS1_POWER_ON');
		IF __QUERYPOINTER(_job_temp.future, mc_power_future) THEN
			mc_power_future^.set_parameters(stAxis1, TRUE);		
		END_IF
		
		//axis2
		// power on
		_job_temp REF= _axis2_initial_job.children.create_future(mc_power_future_creator,'AXIS2_POWER_ON');
		IF __QUERYPOINTER(_job_temp.future, mc_power_future) THEN
			mc_power_future^.set_parameters(stAxis2, TRUE);		
		END_IF
		
		IF main_job.init() THEN
			iState := 3;
		END_IF
	3: // jog and wait for start
		IF main_job.execute() THEN
			iState := 4;
		END_IF
	
		IF main_job.current_state = E_FutureExecutionState.wait_for_process THEN
			main_job.start();
		END_IF

	4:
		fbJog(Axis:=stAxis2, Position := 1,JogForward:=bJogPlus ,JogBackwards:=bJogMinus , );

		IF bStart THEN
			iState := 5;
		END_IF

	5: // Job create
	
		initial_parallel_job_container REF= main_job.children.create_container(ContainerType.PARALLEL, 'Initialization');
		// create batch job container for each axis initialization jobs
		_axis1_initial_job REF= initial_parallel_job_container.children.create_container(ContainerType.BATCH, 'AXIS_1_INIT');
		_axis2_initial_job REF= initial_parallel_job_container.children.create_container(ContainerType.BATCH, 'AXIS_2_INIT');
	
		// position set to 0
		_job_temp REF= _axis1_initial_job.children.create_future(mc_set_position_future_creator,'AXIS1_POS_INIT');
		IF __QUERYPOINTER(_job_temp.future, mc_set_position_future) THEN
			mc_set_position_future^.set_parameters(stAxis1, 0);
		END_IF

		_job_temp REF= _axis2_initial_job.children.create_future(mc_set_position_future_creator,'AXIS2_POS_INIT');
		IF __QUERYPOINTER(_job_temp.future, mc_set_position_future) THEN
			mc_set_position_future^.set_parameters(stAxis2, 0);
		END_IF

		// Gear In
		_job_temp REF= main_job.children.create_future(mc_gear_in_future_creator,'Gear IN');
		IF __QUERYPOINTER(_job_temp.future, mc_gear_in_future) THEN
			mc_gear_in_future^.set_parameters(stAxis1, stAxis2);
		END_IF
		
		iState := 6;

	6:
		IF main_job.execute() THEN
			iState := 7;
		END_IF
	
		IF main_job.current_state = E_FutureExecutionState.wait_for_process THEN
			main_job.start();
		END_IF

	7:
		demo_job_container REF= main_job.children.create_container(ContainerType.BATCH, 'DEMO');
	
		// Sequence
		FOR i := 1 TO 10 DO
		
			_job_temp REF= demo_job_container.children.create_future(mc_move_rel_future_creator,CONCAT('MOVE20_', TO_STRING(i)));
			IF __QUERYPOINTER(_job_temp.future, mc_move_rel_future) THEN
				mc_move_rel_future^.set_parameters(stAxis1,20,200,0,0,0,0);
			END_IF
		
			_job_temp REF= demo_job_container.children.create_future(sleep_creator,CONCAT('WAIT_100MS_', TO_STRING(i)));
			IF __QUERYPOINTER(_job_temp.future, sleep) THEN
				sleep^.sleep_time := T#100MS;
			END_IF
			
		END_FOR
		
		// position set to 0

		_job_temp REF= demo_job_container.children.create_future(mc_move_abs_future_creator,CONCAT('MOVE20_', TO_STRING(i)));
		IF __QUERYPOINTER(_job_temp.future, mc_move_abs_future) THEN
			mc_move_abs_future^.set_parameters(stAxis1,0,200,0,0,0,0);
		END_IF
		
		FOR i := 1 TO 10 DO
		
			_job_temp REF= demo_job_container.children.create_future(mc_move_rel_future_creator,CONCAT('MOVE-20_', TO_STRING(i)));
			IF __QUERYPOINTER(_job_temp.future, mc_move_rel_future) THEN
				mc_move_rel_future^.set_parameters(stAxis1,-20,200,0,0,0,0);
			END_IF
		
			_job_temp REF= demo_job_container.children.create_future(sleep_creator,CONCAT('WAIT_100MS_', TO_STRING(i)));
			IF __QUERYPOINTER(_job_temp.future, sleep) THEN
				sleep^.sleep_time := T#100MS;
			END_IF
			
		END_FOR
		
		// position to 0

		_job_temp REF= demo_job_container.children.create_future(mc_move_abs_future_creator,'MOVE_HOME');
		IF __QUERYPOINTER(_job_temp.future, mc_move_abs_future) THEN
			mc_move_abs_future^.set_parameters(stAxis1,0,200,0,0,0,0);
		END_IF

		_job_temp REF= demo_job_container.children.create_future(sleep_creator,'WAIT_100MS');
		IF __QUERYPOINTER(_job_temp.future, sleep) THEN
			sleep^.sleep_time := T#100MS;
		END_IF
		
		// 1000deg/s -> 500deg/s
		
		_job_temp REF= demo_job_container.children.create_future(mc_move_velocity_future_creator,'VELO-1000');
		IF __QUERYPOINTER(_job_temp.future, mc_move_velocity_future) THEN
			mc_move_velocity_future^.set_parameters(stAxis1,MC_Direction.MC_Positive_Direction,1000,0,0,0,0);
		END_IF

		_job_temp REF= demo_job_container.children.create_future(sleep_creator,'WAIT_5S');
		IF __QUERYPOINTER(_job_temp.future, sleep) THEN
			sleep^.sleep_time := T#5S;
		END_IF

		_job_temp REF= demo_job_container.children.create_future(mc_move_velocity_future_creator,'VELO-500');
		IF __QUERYPOINTER(_job_temp.future, mc_move_velocity_future) THEN
			mc_move_velocity_future^.set_parameters(stAxis1,MC_Direction.MC_Positive_Direction,500,0,0,0,0);
		END_IF
	
		_job_temp REF= demo_job_container.children.create_future(sleep_creator,'WAIT_5S');
		IF __QUERYPOINTER(_job_temp.future, sleep) THEN
			sleep^.sleep_time := T#5S;
		END_IF

		_job_temp REF= demo_job_container.children.create_future(mc_stop_future_creator,'STOP');
		IF __QUERYPOINTER(_job_temp.future, mc_stop_future) THEN
			mc_stop_future^.set_parameters(stAxis1,0,0);
		END_IF
		
		// position to 0

		_job_temp REF= demo_job_container.children.create_future(mc_move_abs_future_creator,'MOVE_HOME');
		IF __QUERYPOINTER(_job_temp.future, mc_move_abs_future) THEN
			mc_move_abs_future^.set_parameters(stAxis1,0,200,0,0,0,0);
		END_IF
				
		(*
		// Gear Out
		_job_temp REF= demo_job_container.children.create_future(mc_gear_out_future_creator,'Gear OUT');
		IF __QUERYPOINTER(_job_temp.future, mc_gear_out_future) THEN
			mc_gear_out_future^.set_parameters(stAxis2);
		END_IF
		
		
		_job_temp REF= demo_job_container.children.create_future(mc_set_position_future_creator,'AXIS1_POS_INIT');
		IF __QUERYPOINTER(_job_temp.future, mc_set_position_future) THEN
			mc_set_position_future^.set_parameters(stAxis1, 0);
		END_IF
		
		_job_temp REF= demo_job_container.children.create_future(mc_set_position_future_creator,'AXIS2_POS_INIT');
		IF __QUERYPOINTER(_job_temp.future, mc_set_position_future) THEN
			mc_set_position_future^.set_parameters(stAxis2, 0);
		END_IF
		
		// Gear In
		_job_temp REF= demo_job_container.children.create_future(mc_gear_in_future_creator,'Gear IN');
		IF __QUERYPOINTER(_job_temp.future, mc_gear_in_future) THEN
			mc_gear_in_future^.set_parameters(stAxis1, stAxis2);
		END_IF
		*)
		
		iState := 8;

	8:
		IF main_job.execute() AND main_job.nErrorID = 0 THEN
			iState := 9;
		END_IF
	
		//IF main_job.current_state = E_FutureExecutionState.wait_for_process THEN
		//	main_job.start();
		//END_IF
		
		IF NOT bStart THEN
			main_job.abort();
		ELSE
			main_job.start();
		END_IF
		
	9:
		main_job.init();
		IF bStart THEN
			iState := 7;
		END_IF
	
END_CASE

(*

CASE iState OF
0:
 	IF stAxis1.NcToPlc.ErrorCode = 0 AND  stAxis1.NcToPlc.ErrorCode = 0 THEN
		iState:=20;
	ELSE
		iState:=10;
	END_IF
10:
		fbReset1(Axis:=stAxis1 , Execute:=TRUE , Done=> , Busy=> , Error=> , ErrorID=> );
		fbReset2(Axis:=stAxis2 , Execute:=TRUE , Done=> , Busy=> , Error=> , ErrorID=> );
		IF stAxis1.NcToPlc.ErrorCode = 0 AND  stAxis1.NcToPlc.ErrorCode = 0 THEN
			fbReset1(Axis:=stAxis1 , Execute:=TRUE , Done=> , Busy=> , Error=> , ErrorID=> );
			fbReset2(Axis:=stAxis2 , Execute:=TRUE , Done=> , Busy=> , Error=> , ErrorID=> );
			iState:=20;
		END_IF

20:
   fbPower1(Axis:=stAxis1 , Enable:=bPower ,	Enable_Positive:=bPower , Enable_Negative:=bPower , Override:=100 , BufferMode:= , Options:=  );
   fbPower2(Axis:=stAxis2 , Enable:=bPower ,	Enable_Positive:=bPower , Enable_Negative:=bPower , Override:=100 , BufferMode:= , Options:=  );
	IF fbPower1.Status AND fbPower2.Status AND bPower THEN
		bAllAxisPowerOn:=TRUE;
		iState:=50;
	END_IF
50:
	IF bStart THEN
		iState:=60;
	END_IF
	IF NOT bPower THEN
		iState:=20;
	END_IF
	fbJog(Axis:=stAxis2 , JogForward:=bJogPlus ,JogBackwards:=bJogMinus , );
	
	
60:
   fbSetPosition1(	Axis:=stAxis1 , 	Execute:=TRUE , Position:=0 ,Mode:= , Options:=  );
   fbSetPosition2(	Axis:=stAxis2 , 	Execute:=TRUE , Position:=0 ,Mode:= , Options:=  );
   IF fbSetPosition1.done AND  fbSetPosition2.Done THEN
	   fbSetPosition1(	Axis:=stAxis1 , 	Execute:=FALSE , Position:=0 ,Mode:= , Options:=  );
	   fbSetPosition2(	Axis:=stAxis2 , 	Execute:=FALSE , Position:=0 ,Mode:= , Options:=  );
		iState:=70;	   
   END_IF
70:
	fbGearIn(Master:=stAxis1 ,Slave:=stAxis2 ,Execute:=TRUE ,RatioNumerator:=1 ,RatioDenominator:=1 ,Acceleration:= ,Deceleration:= ,Jerk:= ,BufferMode:= ,	Options:= );
	IF fbGearIn.InGear THEN
		bInsync:=TRUE;
		fbGearIn(Master:=stAxis1 ,Slave:=stAxis2 ,Execute:=FALSE ,RatioNumerator:=1 ,RatioDenominator:=1 ,Acceleration:= ,Deceleration:= ,Jerk:= ,BufferMode:= ,	Options:= );
		iState:=100;
	END_IF
100:
	iMoveCount:=0;
	iMoveCount1:=0;
	lrDiatance:=20;
	iState:=110;
	
110://Demo1
	iState:=120;
120:
    fbMoveRel(Axis:=stAxis1 ,Execute:=TRUE ,Distance:=lrDiatance ,Velocity:=200 );
    IF fbMoveRel.Done THEN
		fbMoveRel(Axis:=stAxis1 ,Execute:=FALSE ,Distance:=lrDiatance ,Velocity:=200 );
		iState:=130;
	END_IF
130:	
   tWaitTimer1(IN:=TRUE,PT:=T#100MS);
   IF tWaitTimer1.Q THEN
	   tWaitTimer1(IN:=FALSE);
		iState:=140;
		iMoveCount:=iMoveCount+1;
   END_IF
140:
	IF iMoveCount > 18 THEN
		iState:=150;
	ELSE
		iState:=110;
     END_IF
150:
    fbMoveAbs1(Axis:=stAxis1 ,	Execute:= TRUE, Position:= 0,Velocity:=700 );	
	IF fbMoveAbs1.Done THEN
		iMoveCount1:=iMoveCount1+1;
		fbMoveAbs1(Axis:=stAxis1 ,	Execute:= FALSE, Position:= 0,Velocity:=700 );
		IF iMoveCount1 > 4 THEN
			iState:=200;
		ELSE
			iMoveCount:=0;
			IF lrDiatance = 20 THEN
				lrDiatance := -20;
			ELSE
				lrDiatance := 20;
			END_IF
			iState:=110;
		END_IF
		
	END_IF
200://Demo2
   tWaitTimer2(IN:=TRUE,PT:=T#100MS);
   IF tWaitTimer2.Q THEN
	   tWaitTimer2(IN:=FALSE);
		iState:=210;
		iMoveCount:=iMoveCount+1;
   END_IF
210:
	fbMoveVelo(	Axis:=stAxis1 ,Execute:=TRUE , Velocity:=1000 ,Direction:=MC_Direction.MC_Positive_Direction );
    IF fbMoveVelo.InVelocity THEN
		fbMoveVelo(	Axis:=stAxis1 ,Execute:=FALSE , Velocity:=1000 ,Direction:=MC_Direction.MC_Positive_Direction );
		iState:=220;
	END_IF
220:
   tWaitTimer3(IN:=TRUE,PT:=T#5S);
   IF tWaitTimer3.Q THEN
	   tWaitTimer3(IN:=FALSE);
		iState:=230;
   END_IF
230:
	fbMoveVelo(	Axis:=stAxis1 ,Execute:=TRUE , Velocity:=500 ,Direction:=MC_Direction.MC_Positive_Direction );
    IF fbMoveVelo.InVelocity THEN
		fbMoveVelo(	Axis:=stAxis1 ,Execute:=FALSE , Velocity:=1000 ,Direction:=MC_Direction.MC_Positive_Direction );
		iState:=240;
	END_IF
240:
   tWaitTimer4(IN:=TRUE,PT:=T#5S);
   IF tWaitTimer4.Q THEN
	   tWaitTimer4(IN:=FALSE);
		iState:=250;
   END_IF
250:
	fbStop(Axis:=stAxis1 , Execute:=TRUE,Deceleration:=100,Jerk:=1000  );
	IF fbStop.Done THEN
		fbStop(Axis:=stAxis1 , Execute:=FALSE  );
		iState:=260;
	END_IF
260:
  tWaitTimer5(IN:=TRUE,PT:=T#3000MS);
   IF tWaitTimer5.Q THEN
	   tWaitTimer5(IN:=FALSE);
		iState:=270;
   END_IF
270:
    fbMoveAbs3(Axis:=stAxis1 ,	Execute:= TRUE, Position:= 0,Velocity:=1000 );	
	tWaitTimer6(IN:=TRUE,PT:=T#5S);
	IF tWaitTimer6.Q THEN
		fbMoveAbs3(Axis:=stAxis1 ,	Execute:= FALSE, Position:= 0,Velocity:=1000 );	
	   tWaitTimer6(IN:=FALSE);
		iState:=280;
	END_IF
	IF fbMoveAbs3.Done THEN
		iState:=300;
		fbMoveAbs3(Axis:=stAxis1 ,	Execute:= FALSE, Position:= 0,Velocity:=1000);
	END_IF
280:
    fbMoveAbs2(Axis:=stAxis1 ,	Execute:= TRUE, Position:= 0,Velocity:=500 );	
	IF fbMoveAbs2.Done THEN
		iState:=1000;
		fbMoveAbs2(Axis:=stAxis1 ,	Execute:= FALSE, Position:= 0,);
	END_IF

	
1000: //End Prodcution Code
	IF NOT bStart THEN
		iState:=1010;
	ELSE
		iState:=100;
	END_IF
1010:
  fbGearOut(Slave:=stAxis2 , Execute:=TRUE );
  IF fbGearOut.Done THEN
		bInsync:=FALSE;
	   fbGearOut(Slave:=stAxis2 , Execute:=FALSE );
		iState:=50;
  END_IF

2000: //error Handle
  fbGearO/.ut(Slave:=stAxis2 , Execute:=TRUE );
  IF fbGearOut.Done THEN
	bInsync:=FALSE;
	fbGearOut(Slave:=stAxis2 , Execute:=FALSE );
	iState:=2010;
  END_IF
2010:
	bPower:=FALSE;
  	fbPower1(Axis:=stAxis1 , Enable:=bPower ,	Enable_Positive:=bPower , Enable_Negative:=bPower , Override:=100 , BufferMode:= , Options:=  );
   	fbPower2(Axis:=stAxis2 , Enable:=bPower ,	Enable_Positive:=bPower , Enable_Negative:=bPower , Override:=100 , BufferMode:= , Options:=  );
	IF NOT fbPower1.Status AND NOT fbPower2.Status THEN
		bAllAxisPowerOn:=FALSE;
		iState:=2020;
	END_IF
2020:
	fbReset1(Axis:=stAxis1 , Execute:= bReset);
	fbReset2(Axis:=stAxis2 , Execute:= bReset);
	bReset:=FALSE;
	IF stAxis1.NcToPlc.ErrorCode = 0 AND stAxis2.NcToPlc.ErrorCode = 0 THEN
		bError:=FALSE;
		fbReset1(Axis:=stAxis1 , Execute:= FALSE);
		fbReset2(Axis:=stAxis2 , Execute:= FALSE);
		iState:=0;
	END_IF 
END_CASE

*)]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="2987" Count="0" />
      <LineId Id="2989" Count="0" />
      <LineId Id="2992" Count="0" />
      <LineId Id="3017" Count="0" />
      <LineId Id="3012" Count="0" />
      <LineId Id="3015" Count="1" />
      <LineId Id="3013" Count="1" />
      <LineId Id="2991" Count="0" />
      <LineId Id="2990" Count="0" />
      <LineId Id="2988" Count="0" />
      <LineId Id="2003" Count="0" />
      <LineId Id="2429" Count="1" />
      <LineId Id="2004" Count="0" />
      <LineId Id="2006" Count="0" />
      <LineId Id="2957" Count="1" />
      <LineId Id="2994" Count="0" />
      <LineId Id="2970" Count="0" />
      <LineId Id="2995" Count="0" />
      <LineId Id="2998" Count="2" />
      <LineId Id="2997" Count="0" />
      <LineId Id="2974" Count="0" />
      <LineId Id="3001" Count="0" />
      <LineId Id="2975" Count="2" />
      <LineId Id="3002" Count="0" />
      <LineId Id="3005" Count="0" />
      <LineId Id="2961" Count="0" />
      <LineId Id="2959" Count="0" />
      <LineId Id="2978" Count="0" />
      <LineId Id="2980" Count="0" />
      <LineId Id="3022" Count="0" />
      <LineId Id="3003" Count="1" />
      <LineId Id="2983" Count="2" />
      <LineId Id="2979" Count="0" />
      <LineId Id="2956" Count="0" />
      <LineId Id="2007" Count="1" />
      <LineId Id="2400" Count="1" />
      <LineId Id="3018" Count="0" />
      <LineId Id="3021" Count="0" />
      <LineId Id="3020" Count="0" />
      <LineId Id="2398" Count="1" />
      <LineId Id="2009" Count="0" />
      <LineId Id="2963" Count="0" />
      <LineId Id="2014" Count="11" />
      <LineId Id="2032" Count="6" />
      <LineId Id="2917" Count="0" />
      <LineId Id="2919" Count="2" />
      <LineId Id="2913" Count="0" />
      <LineId Id="2928" Count="6" />
      <LineId Id="2927" Count="0" />
      <LineId Id="2947" Count="0" />
      <LineId Id="2955" Count="0" />
      <LineId Id="2954" Count="0" />
      <LineId Id="2948" Count="2" />
      <LineId Id="2935" Count="0" />
      <LineId Id="2039" Count="0" />
      <LineId Id="2936" Count="1" />
      <LineId Id="2952" Count="1" />
      <LineId Id="2951" Count="0" />
      <LineId Id="2916" Count="0" />
      <LineId Id="3008" Count="3" />
      <LineId Id="3006" Count="1" />
      <LineId Id="2041" Count="3" />
      <LineId Id="2419" Count="0" />
      <LineId Id="2414" Count="0" />
      <LineId Id="2411" Count="2" />
      <LineId Id="2409" Count="0" />
      <LineId Id="2052" Count="0" />
      <LineId Id="2054" Count="0" />
      <LineId Id="2938" Count="0" />
      <LineId Id="2056" Count="0" />
      <LineId Id="2940" Count="6" />
      <LineId Id="2939" Count="0" />
      <LineId Id="2383" Count="0" />
      <LineId Id="2418" Count="0" />
      <LineId Id="2384" Count="0" />
      <LineId Id="2362" Count="0" />
      <LineId Id="2510" Count="0" />
      <LineId Id="2512" Count="0" />
      <LineId Id="2369" Count="3" />
      <LineId Id="2513" Count="0" />
      <LineId Id="2521" Count="2" />
      <LineId Id="2519" Count="1" />
      <LineId Id="2514" Count="0" />
      <LineId Id="2536" Count="0" />
      <LineId Id="2531" Count="0" />
      <LineId Id="2644" Count="0" />
      <LineId Id="2646" Count="3" />
      <LineId Id="2734" Count="0" />
      <LineId Id="2756" Count="19" />
      <LineId Id="2873" Count="0" />
      <LineId Id="2875" Count="3" />
      <LineId Id="2755" Count="0" />
      <LineId Id="2872" Count="0" />
      <LineId Id="2645" Count="0" />
      <LineId Id="2864" Count="3" />
      <LineId Id="2886" Count="0" />
      <LineId Id="2888" Count="3" />
      <LineId Id="2887" Count="0" />
      <LineId Id="2892" Count="3" />
      <LineId Id="2868" Count="3" />
      <LineId Id="2860" Count="0" />
      <LineId Id="2899" Count="4" />
      <LineId Id="2861" Count="0" />
      <LineId Id="2904" Count="5" />
      <LineId Id="2862" Count="0" />
      <LineId Id="2544" Count="0" />
      <LineId Id="2558" Count="3" />
      <LineId Id="2548" Count="0" />
      <LineId Id="2542" Count="1" />
      <LineId Id="2532" Count="3" />
      <LineId Id="2406" Count="0" />
      <LineId Id="2539" Count="2" />
      <LineId Id="2537" Count="0" />
      <LineId Id="2552" Count="0" />
      <LineId Id="2554" Count="3" />
      <LineId Id="2553" Count="0" />
      <LineId Id="2643" Count="0" />
      <LineId Id="2538" Count="0" />
      <LineId Id="2405" Count="0" />
      <LineId Id="2058" Count="8" />
      <LineId Id="2421" Count="2" />
      <LineId Id="2427" Count="1" />
      <LineId Id="2424" Count="0" />
      <LineId Id="2067" Count="2" />
      <LineId Id="2526" Count="2" />
      <LineId Id="2072" Count="1" />
      <LineId Id="2077" Count="199" />
      <LineId Id="1144" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>