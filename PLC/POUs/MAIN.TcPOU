<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="MAIN" Id="{22afa678-1e60-4864-9c5a-6f323d8f260f}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	work_number	: ULINT;
	act_dc_time : T_DCTIME64;
	dc_task_time : T_DCTIME64;
	dc_tick_time : T_DCTIME64;
	diff_time : T_DCTIME64;
	fbConvertDcTimeToPos : ConvertDcTimeToPos;
	position_at_task_start_point : LREAL;
	position_diff : LREAL;
	dc_time_array : ARRAY [0..1] OF T_DCTIME32;

	fbPower1:mc_power;
	fbPower2:mc_power;
	fbJog:MC_Jog;
	basic_job : FB_Executor;
	demo_job : FB_Executor;
	gear_in_job : FB_Executor;
	init_pos_job : FB_Executor;
	jog_plus_job : FB_Executor;
	jog_minus_job : FB_Executor;
	fb_observer : FB_Observer;
	job_reset : BOOL;
	
	mc_power_future_creator: FutureMCPowerCreator;
	mc_reset_future_creator: FutureMCResetCreator;
	mc_set_position_future_creator: FutureMCSetPositionCreator;
	mc_inching_future_creator : FutureMCInchingCreator;
	mc_gear_in_future_creator : FutureMCGearInCreator;
	mc_gear_out_future_creator : FutureMCGearOutCreator;
	mc_move_rel_future_creator : FutureMCMoveRelativeCreator;
	mc_move_abs_future_creator : FutureMCMoveAbsoluteCreator;
	mc_move_velocity_future_creator: FutureMCMoveVelocityCreator;
	mc_stop_future_creator: FutureMCStopCreator;
	sleep_creator : FutureSleepCreator;

	
	iState:INT;
	stAxis1:axis_ref;
	stAxis2:axis_ref;
	bStart: BOOL;
	bJogPlus: BOOL;
	bJogMinus: BOOL;
	bPower: BOOL;
	_bPower : BOOL;
	iPowerState : UINT;
	bReset:BOOL;
	bError:BOOL;
	bAllAxisPowerOn: BOOL;
	bInsync:BOOL;
	create_container: INT;
	boot_up : BOOL := TRUE;
	i: UINT;
	
	quit: INT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
act_dc_time := F_GetActualDcTime64();
dc_task_time := F_GetCurDcTaskTime64();
dc_tick_time := F_GetCurDcTickTime64();

MEMCPY(ADR(dc_time_array), ADR(dc_task_time), SIZEOF(dc_task_time));

fbConvertDcTimeToPos(nAxisId := 1, nSubIdx := 16#10000, dcTime := dc_time_array[0] + 300000);
position_at_task_start_point := fbConvertDcTimeToPos.fPosition;
position_diff := stAxis1.NcToPlc.ActPos - fbConvertDcTimeToPos.fPosition;

diff_time := act_dc_time - dc_task_time;

IF boot_up THEN
	basic_job.create_container(ContainerType.PARALLEL_QUEUE, 'BASIC');
	basic_job.continuous_mode := TRUE;
	basic_job.id := 'M1';
	basic_job.job_event_reporter := fb_observer;
	JobCreate_PosInit(init_pos_job);
	JobCreate_GearIn(gear_in_job);
	JobCreateDemo(demo_job);
	
	

	mc_inching_future_creator.set_parameters(stAxis2, TRUE,1 , 100);
	jog_plus_job.create_future(mc_inching_future_creator,'JOG_PLUS');
	
	mc_inching_future_creator.set_parameters(stAxis2, FALSE, 1, 100);		
	jog_minus_job.create_future(mc_inching_future_creator,'JOG_MINUS');

	boot_up := FALSE;
END_IF


fbPower1(Axis := stAxis1, Enable := bPower, Enable_Positive := TRUE, Enable_Negative := TRUE, Override := 100.0);
fbPower2(Axis := stAxis2, Enable := bPower, Enable_Positive := TRUE, Enable_Negative := TRUE, Override := 100.0);

(*
IF NOT fbPower1.Status AND NOT fbPower2.Status THEN
	IF demo_job.reset(FALSE) THEN
		iState := 0;
	END_IF
END_IF
*)

CASE iState OF
	0:
		IF fbPower1.Status AND fbPower2.Status THEN
			IF init_pos_job.init() THEN
				basic_job.children.append_job(init_pos_job);
				iState := 1;
			END_IF
		END_IF
	1:
		IF init_pos_job.done THEN
			iState := 2;
		END_IF
	2:
		//fbJog(Axis:=stAxis1 , JogForward:=bJogPlus ,JogBackwards:=bJogMinus, Position := 1, Velocity := 100, Mode := E_JogMode.MC_JOGMODE_INCHING );
		IF bJogPlus THEN
			IF jog_plus_job.init() THEN
				basic_job.children.append_job(jog_plus_job);
				bJogPlus := FALSE;				
			END_IF
		END_IF
		
		IF bJogMinus THEN
			IF jog_minus_job.init() THEN
				basic_job.children.append_job(jog_minus_job);
				bJogMinus := FALSE;				
			END_IF
		END_IF

		IF bStart THEN
			IF gear_in_job.init() THEN
				basic_job.children.append_job(gear_in_job);
				iState := 3;
			END_IF
		END_IF
	3:
		IF demo_job.init() THEN
			work_number := work_number + 1;
			demo_job.id := TO_STRING(work_number);
			basic_job.children.append_job(demo_job);
			iState := 4;
		END_IF
	4:
		IF demo_job.done THEN
			IF bStart THEN
				iState := 3;
			ELSE
				iState := 1;
			END_IF
		END_IF
END_CASE


IF bPower THEN
	job_reset := TRUE;
ELSE
	IF job_reset AND basic_job.reset(FALSE) THEN
		iState := 0;
		job_reset := FALSE;
	END_IF
END_IF

basic_job.execute();

bError := basic_job.nErrorID <> 0;

IF bReset THEN
	IF basic_job.error_reset() THEN
		IF basic_job.resume() THEN
			bReset := FALSE;
		END_IF
	END_IF 
END_IF

IF basic_job.ready THEN
	basic_job.start();
END_IF

(*

CASE iState OF
0:
 	IF stAxis1.NcToPlc.ErrorCode = 0 AND  stAxis1.NcToPlc.ErrorCode = 0 THEN
		iState:=20;
	ELSE
		iState:=10;
	END_IF
10:
		fbReset1(Axis:=stAxis1 , Execute:=TRUE , Done=> , Busy=> , Error=> , ErrorID=> );
		fbReset2(Axis:=stAxis2 , Execute:=TRUE , Done=> , Busy=> , Error=> , ErrorID=> );
		IF stAxis1.NcToPlc.ErrorCode = 0 AND  stAxis1.NcToPlc.ErrorCode = 0 THEN
			fbReset1(Axis:=stAxis1 , Execute:=TRUE , Done=> , Busy=> , Error=> , ErrorID=> );
			fbReset2(Axis:=stAxis2 , Execute:=TRUE , Done=> , Busy=> , Error=> , ErrorID=> );
			iState:=20;
		END_IF

20:
   fbPower1(Axis:=stAxis1 , Enable:=bPower ,	Enable_Positive:=bPower , Enable_Negative:=bPower , Override:=100 , BufferMode:= , Options:=  );
   fbPower2(Axis:=stAxis2 , Enable:=bPower ,	Enable_Positive:=bPower , Enable_Negative:=bPower , Override:=100 , BufferMode:= , Options:=  );
	IF fbPower1.Status AND fbPower2.Status AND bPower THEN
		bAllAxisPowerOn:=TRUE;
		iState:=50;
	END_IF
50:
	IF bStart THEN
		iState:=60;
	END_IF
	IF NOT bPower THEN
		iState:=20;
	END_IF
	fbJog(Axis:=stAxis2 , JogForward:=bJogPlus ,JogBackwards:=bJogMinus , );
	
	
60:
   fbSetPosition1(	Axis:=stAxis1 , 	Execute:=TRUE , Position:=0 ,Mode:= , Options:=  );
   fbSetPosition2(	Axis:=stAxis2 , 	Execute:=TRUE , Position:=0 ,Mode:= , Options:=  );
   IF fbSetPosition1.done AND  fbSetPosition2.Done THEN
	   fbSetPosition1(	Axis:=stAxis1 , 	Execute:=FALSE , Position:=0 ,Mode:= , Options:=  );
	   fbSetPosition2(	Axis:=stAxis2 , 	Execute:=FALSE , Position:=0 ,Mode:= , Options:=  );
		iState:=70;	   
   END_IF
70:
	fbGearIn(Master:=stAxis1 ,Slave:=stAxis2 ,Execute:=TRUE ,RatioNumerator:=1 ,RatioDenominator:=1 ,Acceleration:= ,Deceleration:= ,Jerk:= ,BufferMode:= ,	Options:= );
	IF fbGearIn.InGear THEN
		bInsync:=TRUE;
		fbGearIn(Master:=stAxis1 ,Slave:=stAxis2 ,Execute:=FALSE ,RatioNumerator:=1 ,RatioDenominator:=1 ,Acceleration:= ,Deceleration:= ,Jerk:= ,BufferMode:= ,	Options:= );
		iState:=100;
	END_IF
100:
	iMoveCount:=0;
	iMoveCount1:=0;
	lrDiatance:=20;
	iState:=110;
	
110://Demo1
	iState:=120;
120:
    fbMoveRel(Axis:=stAxis1 ,Execute:=TRUE ,Distance:=lrDiatance ,Velocity:=200 );
    IF fbMoveRel.Done THEN
		fbMoveRel(Axis:=stAxis1 ,Execute:=FALSE ,Distance:=lrDiatance ,Velocity:=200 );
		iState:=130;
	END_IF
130:	
   tWaitTimer1(IN:=TRUE,PT:=T#100MS);
   IF tWaitTimer1.Q THEN
	   tWaitTimer1(IN:=FALSE);
		iState:=140;
		iMoveCount:=iMoveCount+1;
   END_IF
140:
	IF iMoveCount > 18 THEN
		iState:=150;
	ELSE
		iState:=110;
     END_IF
150:
    fbMoveAbs1(Axis:=stAxis1 ,	Execute:= TRUE, Position:= 0,Velocity:=700 );	
	IF fbMoveAbs1.Done THEN
		iMoveCount1:=iMoveCount1+1;
		fbMoveAbs1(Axis:=stAxis1 ,	Execute:= FALSE, Position:= 0,Velocity:=700 );
		IF iMoveCount1 > 4 THEN
			iState:=200;
		ELSE
			iMoveCount:=0;
			IF lrDiatance = 20 THEN
				lrDiatance := -20;
			ELSE
				lrDiatance := 20;
			END_IF
			iState:=110;
		END_IF
		
	END_IF
200://Demo2
   tWaitTimer2(IN:=TRUE,PT:=T#100MS);
   IF tWaitTimer2.Q THEN
	   tWaitTimer2(IN:=FALSE);
		iState:=210;
		iMoveCount:=iMoveCount+1;
   END_IF
210:
	fbMoveVelo(	Axis:=stAxis1 ,Execute:=TRUE , Velocity:=1000 ,Direction:=MC_Direction.MC_Positive_Direction );
    IF fbMoveVelo.InVelocity THEN
		fbMoveVelo(	Axis:=stAxis1 ,Execute:=FALSE , Velocity:=1000 ,Direction:=MC_Direction.MC_Positive_Direction );
		iState:=220;
	END_IF
220:
   tWaitTimer3(IN:=TRUE,PT:=T#5S);
   IF tWaitTimer3.Q THEN
	   tWaitTimer3(IN:=FALSE);
		iState:=230;
   END_IF
230:
	fbMoveVelo(	Axis:=stAxis1 ,Execute:=TRUE , Velocity:=500 ,Direction:=MC_Direction.MC_Positive_Direction );
    IF fbMoveVelo.InVelocity THEN
		fbMoveVelo(	Axis:=stAxis1 ,Execute:=FALSE , Velocity:=1000 ,Direction:=MC_Direction.MC_Positive_Direction );
		iState:=240;
	END_IF
240:
   tWaitTimer4(IN:=TRUE,PT:=T#5S);
   IF tWaitTimer4.Q THEN
	   tWaitTimer4(IN:=FALSE);
		iState:=250;
   END_IF
250:
	fbStop(Axis:=stAxis1 , Execute:=TRUE,Deceleration:=100,Jerk:=1000  );
	IF fbStop.Done THEN
		fbStop(Axis:=stAxis1 , Execute:=FALSE  );
		iState:=260;
	END_IF
260:
  tWaitTimer5(IN:=TRUE,PT:=T#3000MS);
   IF tWaitTimer5.Q THEN
	   tWaitTimer5(IN:=FALSE);
		iState:=270;
   END_IF
270:
    fbMoveAbs3(Axis:=stAxis1 ,	Execute:= TRUE, Position:= 0,Velocity:=1000 );	
	tWaitTimer6(IN:=TRUE,PT:=T#5S);
	IF tWaitTimer6.Q THEN
		fbMoveAbs3(Axis:=stAxis1 ,	Execute:= FALSE, Position:= 0,Velocity:=1000 );	
	   tWaitTimer6(IN:=FALSE);
		iState:=280;
	END_IF
	IF fbMoveAbs3.Done THEN
		iState:=300;
		fbMoveAbs3(Axis:=stAxis1 ,	Execute:= FALSE, Position:= 0,Velocity:=1000);
	END_IF
280:
    fbMoveAbs2(Axis:=stAxis1 ,	Execute:= TRUE, Position:= 0,Velocity:=500 );	
	IF fbMoveAbs2.Done THEN
		iState:=1000;
		fbMoveAbs2(Axis:=stAxis1 ,	Execute:= FALSE, Position:= 0,);
	END_IF

	
1000: //End Prodcution Code
	IF NOT bStart THEN
		iState:=1010;
	ELSE
		iState:=100;
	END_IF
1010:
  fbGearOut(Slave:=stAxis2 , Execute:=TRUE );
  IF fbGearOut.Done THEN
		bInsync:=FALSE;
	   fbGearOut(Slave:=stAxis2 , Execute:=FALSE );
		iState:=50;
  END_IF

2000: //error Handle
  fbGearO/.ut(Slave:=stAxis2 , Execute:=TRUE );
  IF fbGearOut.Done THEN
	bInsync:=FALSE;
	fbGearOut(Slave:=stAxis2 , Execute:=FALSE );
	iState:=2010;
  END_IF
2010:
	bPower:=FALSE;
  	fbPower1(Axis:=stAxis1 , Enable:=bPower ,	Enable_Positive:=bPower , Enable_Negative:=bPower , Override:=100 , BufferMode:= , Options:=  );
   	fbPower2(Axis:=stAxis2 , Enable:=bPower ,	Enable_Positive:=bPower , Enable_Negative:=bPower , Override:=100 , BufferMode:= , Options:=  );
	IF NOT fbPower1.Status AND NOT fbPower2.Status THEN
		bAllAxisPowerOn:=FALSE;
		iState:=2020;
	END_IF
2020:
	fbReset1(Axis:=stAxis1 , Execute:= bReset);
	fbReset2(Axis:=stAxis2 , Execute:= bReset);
	bReset:=FALSE;
	IF stAxis1.NcToPlc.ErrorCode = 0 AND stAxis2.NcToPlc.ErrorCode = 0 THEN
		bError:=FALSE;
		fbReset1(Axis:=stAxis1 , Execute:= FALSE);
		fbReset2(Axis:=stAxis2 , Execute:= FALSE);
		iState:=0;
	END_IF 
END_CASE

*)]]></ST>
    </Implementation>
    <Method Name="Execution" Id="{d52dbacd-3d99-403b-bb01-e4478be4b44b}">
      <Declaration><![CDATA[METHOD Execution : BOOL
VAR_INPUT
	main_job : REFERENCE TO FB_Executor;
	bStart : BOOL := TRUE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Execution := main_job.execute();

IF main_job.ready THEN
	main_job.start();
END_IF

IF bStart THEN
	main_job.start();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="JobCreate_GearIn" Id="{fcc86729-849d-4b88-bffd-35052ffdfb89}">
      <Declaration><![CDATA[METHOD JobCreate_GearIn : BOOL
VAR_INPUT
	job : REFERENCE TO FB_Executor;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Gear In
mc_gear_in_future_creator.set_parameters(stAxis1, stAxis2);
job.create_future(mc_gear_in_future_creator,'Gear IN');
]]></ST>
      </Implementation>
    </Method>
    <Method Name="JobCreate_PosInit" Id="{8ecc2f01-c3e3-4110-a58b-a3226565c5d4}">
      <Declaration><![CDATA[METHOD JobCreate_PosInit : BOOL
VAR_INPUT
	job : REFERENCE TO FB_Executor;
END_VAR
VAR
	_job_temp	: REFERENCE TO FB_Executor; // reference to job object for working.
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[job.create_container(ContainerType.PARALLEL, 'INIT_POS');
// position set to 0
mc_set_position_future_creator.set_parameters(stAxis1, 0);
_job_temp REF= job.children.create_job(mc_set_position_future_creator,'AXIS1_POS_INIT');

mc_set_position_future_creator.set_parameters(stAxis2, 0);
_job_temp REF= job.children.create_job(mc_set_position_future_creator,'AXIS2_POS_INIT');
]]></ST>
      </Implementation>
    </Method>
    <Method Name="JobCreateDemo" Id="{c6c18e30-8bba-4c6d-806d-02b28dd2a277}">
      <Declaration><![CDATA[METHOD JobCreateDemo : BOOL
VAR_INPUT
	base_job : REFERENCE TO FB_Executor;
END_VAR
VAR
	_job_temp : REFERENCE TO FB_Executor;
	sleep : POINTER TO FutureSleep;
	sleep_creator : FutureSleepCreator;

	mc_move_rel_future : POINTER TO FutureMCMoveRelative;
	mc_move_rel_future_creator : FutureMCMoveRelativeCreator;

	mc_move_abs_future : POINTER TO FutureMCMoveAbsolute;
	mc_move_abs_future_creator : FutureMCMoveAbsoluteCreator;

	mc_move_velocity_future: POINTER TO FutureMCMoveVelocity;
	mc_move_velocity_future_creator: FutureMCMoveVelocityCreator;

END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[base_job.create_container(ContainerTYpe.BATCH, 'DEMO_JOB');
// Sequence
FOR i := 1 TO 10 DO

	mc_move_rel_future_creator.set_parameters(stAxis1,20,200,0,0,0,0);
	_job_temp REF= base_job.children.create_job(mc_move_rel_future_creator,CONCAT('MOVE20_', TO_STRING(i)));

	sleep_creator.sleep_time := T#100MS;
	_job_temp REF= base_job.children.create_job(sleep_creator,CONCAT('WAIT_100MS_', TO_STRING(i)));
	
END_FOR

// position set to 0

mc_move_abs_future_creator.set_parameters(stAxis1,0,200,0,0,0,0);
_job_temp REF= base_job.children.create_job(mc_move_abs_future_creator,CONCAT('MOVE20_', TO_STRING(i)));

FOR i := 1 TO 10 DO

	mc_move_rel_future_creator.set_parameters(stAxis1,-20,200,0,0,0,0);
	_job_temp REF= base_job.children.create_job(mc_move_rel_future_creator,CONCAT('MOVE-20_', TO_STRING(i)));

	sleep_creator.sleep_time := T#100MS;
	_job_temp REF= base_job.children.create_job(sleep_creator,CONCAT('WAIT_100MS_', TO_STRING(i)));
	
END_FOR

// position to 0

mc_move_abs_future_creator.set_parameters(stAxis1,0,200,0,0,0,0);
_job_temp REF= base_job.children.create_job(mc_move_abs_future_creator,'MOVE_HOME');

sleep_creator.sleep_time := T#100MS;
_job_temp REF= base_job.children.create_job(sleep_creator,'WAIT_100MS');

// 1000deg/s -> 500deg/s

mc_move_velocity_future_creator.set_parameters(stAxis1,MC_Direction.MC_Positive_Direction,1000,0,0,0,0);
_job_temp REF= base_job.children.create_job(mc_move_velocity_future_creator,'VELO-1000');

sleep_creator.sleep_time := T#5S;
_job_temp REF= base_job.children.create_job(sleep_creator,'WAIT_5S');

mc_move_velocity_future_creator.set_parameters(stAxis1,MC_Direction.MC_Positive_Direction,500,0,0,0,0);
_job_temp REF= base_job.children.create_job(mc_move_velocity_future_creator,'VELO-500');

sleep_creator.sleep_time := T#5S;
_job_temp REF= base_job.children.create_job(sleep_creator,'WAIT_5S');

mc_stop_future_creator.set_parameters(stAxis1,0,0);
_job_temp REF= base_job.children.create_job(mc_stop_future_creator,'STOP');

// position to 0

mc_move_abs_future_creator.set_parameters(stAxis1,0,1000,0,0,0,0);
_job_temp REF= base_job.children.create_job(mc_move_abs_future_creator,'MOVE_HOME');
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="MAIN">
      <LineId Id="7433" Count="0" />
      <LineId Id="7422" Count="0" />
      <LineId Id="7427" Count="0" />
      <LineId Id="7423" Count="0" />
      <LineId Id="7499" Count="1" />
      <LineId Id="7439" Count="0" />
      <LineId Id="7438" Count="0" />
      <LineId Id="7442" Count="0" />
      <LineId Id="7496" Count="0" />
      <LineId Id="7436" Count="1" />
      <LineId Id="7424" Count="0" />
      <LineId Id="6897" Count="0" />
      <LineId Id="7628" Count="0" />
      <LineId Id="6899" Count="0" />
      <LineId Id="7689" Count="0" />
      <LineId Id="6900" Count="2" />
      <LineId Id="7157" Count="0" />
      <LineId Id="7626" Count="1" />
      <LineId Id="7327" Count="0" />
      <LineId Id="7300" Count="0" />
      <LineId Id="7296" Count="0" />
      <LineId Id="7326" Count="0" />
      <LineId Id="7301" Count="1" />
      <LineId Id="7295" Count="0" />
      <LineId Id="6903" Count="1" />
      <LineId Id="6921" Count="0" />
      <LineId Id="7161" Count="0" />
      <LineId Id="7165" Count="1" />
      <LineId Id="7328" Count="0" />
      <LineId Id="6925" Count="5" />
      <LineId Id="7329" Count="0" />
      <LineId Id="6931" Count="3" />
      <LineId Id="7820" Count="0" />
      <LineId Id="7823" Count="0" />
      <LineId Id="7829" Count="0" />
      <LineId Id="7822" Count="0" />
      <LineId Id="6935" Count="0" />
      <LineId Id="7828" Count="0" />
      <LineId Id="7825" Count="2" />
      <LineId Id="6937" Count="1" />
      <LineId Id="7277" Count="0" />
      <LineId Id="7317" Count="0" />
      <LineId Id="7320" Count="1" />
      <LineId Id="7319" Count="0" />
      <LineId Id="7283" Count="2" />
      <LineId Id="7312" Count="0" />
      <LineId Id="7315" Count="1" />
      <LineId Id="7314" Count="0" />
      <LineId Id="7291" Count="0" />
      <LineId Id="7168" Count="0" />
      <LineId Id="6940" Count="0" />
      <LineId Id="7307" Count="0" />
      <LineId Id="7310" Count="0" />
      <LineId Id="7332" Count="0" />
      <LineId Id="7309" Count="0" />
      <LineId Id="6943" Count="0" />
      <LineId Id="7333" Count="0" />
      <LineId Id="7335" Count="0" />
      <LineId Id="7556" Count="1" />
      <LineId Id="7336" Count="1" />
      <LineId Id="7334" Count="0" />
      <LineId Id="6948" Count="1" />
      <LineId Id="7338" Count="0" />
      <LineId Id="7341" Count="1" />
      <LineId Id="7339" Count="1" />
      <LineId Id="6955" Count="1" />
      <LineId Id="7802" Count="2" />
      <LineId Id="7836" Count="0" />
      <LineId Id="7835" Count="0" />
      <LineId Id="7831" Count="0" />
      <LineId Id="7837" Count="0" />
      <LineId Id="7833" Count="1" />
      <LineId Id="7832" Count="0" />
      <LineId Id="7805" Count="14" />
      <LineId Id="7801" Count="0" />
      <LineId Id="6957" Count="199" />
      <LineId Id="1144" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.Execution">
      <LineId Id="6" Count="3" />
      <LineId Id="5" Count="0" />
      <LineId Id="15" Count="1" />
      <LineId Id="19" Count="0" />
      <LineId Id="14" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.JobCreate_GearIn">
      <LineId Id="23" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.JobCreate_PosInit">
      <LineId Id="11" Count="1" />
      <LineId Id="27" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="17" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.JobCreateDemo">
      <LineId Id="341" Count="0" />
      <LineId Id="243" Count="1" />
      <LineId Id="360" Count="0" />
      <LineId Id="245" Count="1" />
      <LineId Id="361" Count="0" />
      <LineId Id="250" Count="1" />
      <LineId Id="255" Count="3" />
      <LineId Id="362" Count="0" />
      <LineId Id="259" Count="1" />
      <LineId Id="264" Count="1" />
      <LineId Id="363" Count="0" />
      <LineId Id="266" Count="1" />
      <LineId Id="364" Count="0" />
      <LineId Id="271" Count="1" />
      <LineId Id="276" Count="3" />
      <LineId Id="365" Count="0" />
      <LineId Id="280" Count="1" />
      <LineId Id="366" Count="0" />
      <LineId Id="285" Count="1" />
      <LineId Id="290" Count="1" />
      <LineId Id="367" Count="0" />
      <LineId Id="292" Count="1" />
      <LineId Id="297" Count="0" />
      <LineId Id="368" Count="0" />
      <LineId Id="298" Count="0" />
      <LineId Id="369" Count="0" />
      <LineId Id="302" Count="1" />
      <LineId Id="370" Count="0" />
      <LineId Id="307" Count="1" />
      <LineId Id="371" Count="0" />
      <LineId Id="312" Count="1" />
      <LineId Id="317" Count="1" />
      <LineId Id="372" Count="0" />
      <LineId Id="319" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>